  image: docker:latest
  services:
    - docker:dind
  stages: 
    - build
    - deploy
  before_script:
        - apk add --no-cache curl jq python3 py3-pip
        - pip install awscli
        - aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
        - aws --version
        - docker info
        - docker --version
        - IMAGE_TAG="$(echo $CI_COMMIT_SHA | head -c 8)"
  variables:
    REPOSITORY_URL: $DOCKER_REGISTRY/$APP_NAME
    TASK_DEFINITION_NAME: <Task_Definition>
    CLUSTER_NAME: <CLUSTER_NAME>
    SERVICE_NAME: <SERVICE_NAME>
  #build:
  #  stage: build
  ###  script:
  #      - echo "Building image..."
  #      - docker build -t workforce-planner . -f APITest02/Dockerfile
  #      - echo "Tagging image..."
  #      - docker tag workforce-planner:latest $REPOSITORY_URL:latest
  #      - echo "Pushing image..."
  #      - docker push $REPOSITORY_URL:latest
#only:
#- main
   #     - develop
  deploy:
    stage: deploy
    script:
    #    - echo $REPOSITORY_URL:$IMAGE_TAG
    #    - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "$TASK_DEFINITION_NAME" --region "${AWS_DEFAULT_REGION}")
    #    - NEW_CONTAINER_DEFINTIION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$REPOSITORY_URL:$IMAGE_TAG" '.taskDefinition.containerDefinitions[0].image = $IMAGE | .taskDefinition.containerDefinitions[0]')
    #    - echo "Registering new container definition..."
        - aws ecs register-task-definition --cli-input-json file://workforce-planning-task-defination.json
    #    - echo "Updating the service..."
    #    - aws ecs update-service --region "${AWS_DEFAULT_REGION}" --cluster "${CLUSTER_NAME}" --service "${SERVICE_NAME}" --task-definition "${TASK_DEFINITION_NAME}"
   # only:
    #- main
